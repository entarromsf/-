CONST  const
INT  int
IDENTIFIER  c_i_1
BECOMES  =
PLUS  +
NUMBER  1
COMMA  ,
IDENTIFIER  c_i_2
BECOMES  =
MINUS  -
NUMBER  2
COMMA  ,
IDENTIFIER  c_i_3
BECOMES  =
NUMBER  5
SEMICOLON  ;
CONST  const
CHAR  char
IDENTIFIER  c_c_1
BECOMES  =
zifu  a
COMMA  ,
IDENTIFIER  c_c_2
BECOMES  =
zifu  b
SEMICOLON  ;
INT  int
IDENTIFIER  var_i_1
COMMA  ,
IDENTIFIER  var_i_2
SEMICOLON  ;
INT  int
IDENTIFIER  var_i_array
LBRACK  [
NUMBER  9
RBRACK  ]
SEMICOLON  ;
CHAR  char
IDENTIFIER  var_c_1
COMMA  ,
IDENTIFIER  var_c_2
SEMICOLON  ;
CHAR  char
IDENTIFIER  var_c_array
LBRACK  [
NUMBER  9
RBRACK  ]
SEMICOLON  ;
VOID  void
IDENTIFIER  testvoid
LBRACE  {
PRINTF  printf
LPAREN  (
string  c_i_1:
COMMA  ,
IDENTIFIER  c_i_1
RPAREN  )
SEMICOLON  ;
PRINTF  printf
LPAREN  (
string  c_i_2:
RPAREN  )
SEMICOLON  ;
PRINTF  printf
LPAREN  (
IDENTIFIER  c_i_1
PLUS  +
IDENTIFIER  c_i_2
TIMES  *
IDENTIFIER  c_i_3
RPAREN  )
SEMICOLON  ;
RBRACE  }
VOID  void
IDENTIFIER  switchtest
LPAREN  (
INT  int
IDENTIFIER  num
RPAREN  )
LBRACE  {
SWITCH  switch
LPAREN  (
IDENTIFIER  num
RPAREN  )
LBRACE  {
CASE  case
NUMBER  1
COLON  :
PRINTF  printf
LPAREN  (
string  situation1
RPAREN  )
SEMICOLON  ;
CASE  case
NUMBER  2
COLON  :
PRINTF  printf
LPAREN  (
string  situation2
RPAREN  )
SEMICOLON  ;
CASE  case
NUMBER  3
COLON  :
PRINTF  printf
LPAREN  (
string  situation3
RPAREN  )
SEMICOLON  ;
DEFAULT  default
COLON  :
PRINTF  printf
LPAREN  (
string  other
RPAREN  )
SEMICOLON  ;
RBRACE  }
RBRACE  }
VOID  void
IDENTIFIER  testifelse
LPAREN  (
INT  int
IDENTIFIER  num
RPAREN  )
LBRACE  {
IF  if
LPAREN  (
IDENTIFIER  num
LES  <
NUMBER  10
RPAREN  )
PRINTF  printf
LPAREN  (
string  small than 10
RPAREN  )
SEMICOLON  ;
ELSE  else
PRINTF  printf
LPAREN  (
string  big than 10
RPAREN  )
SEMICOLON  ;
IF  if
LPAREN  (
IDENTIFIER  num
LEQ  <=
NUMBER  10
RPAREN  )
PRINTF  printf
LPAREN  (
string  small or equal than 10
RPAREN  )
SEMICOLON  ;
ELSE  else
PRINTF  printf
LPAREN  (
string  big than 10
RPAREN  )
SEMICOLON  ;
IF  if
LPAREN  (
IDENTIFIER  num
GEQ  >=
NUMBER  10
RPAREN  )
PRINTF  printf
LPAREN  (
string  big or equal than 10
RPAREN  )
SEMICOLON  ;
ELSE  else
PRINTF  printf
LPAREN  (
string  small than 10
RPAREN  )
SEMICOLON  ;
IF  if
LPAREN  (
IDENTIFIER  num
NEQ  !=
NUMBER  10
RPAREN  )
PRINTF  printf
LPAREN  (
string  not equal 10
RPAREN  )
SEMICOLON  ;
ELSE  else
PRINTF  printf
LPAREN  (
string  equal 10
RPAREN  )
SEMICOLON  ;
RBRACE  }
INT  int
IDENTIFIER  dowhiletest
LBRACE  {
INT  int
IDENTIFIER  i
BECOMES  =
NUMBER  0
SEMICOLON  ;
INT  int
IDENTIFIER  j
BECOMES  =
NUMBER  0
SEMICOLON  ;
DO  do
LBRACE  {
IDENTIFIER  var_i_array
LBRACK  [
IDENTIFIER  i
RBRACK  ]
BECOMES  =
IDENTIFIER  i
SEMICOLON  ;
IDENTIFIER  var_c_array
LBRACK  [
IDENTIFIER  i
RBRACK  ]
BECOMES  =
zifu  a
PLUS  +
IDENTIFIER  i
SEMICOLON  ;
IDENTIFIER  i
BECOMES  =
IDENTIFIER  i
PLUS  +
NUMBER  1
SEMICOLON  ;
IDENTIFIER  j
BECOMES  =
IDENTIFIER  j
PLUS  +
IDENTIFIER  var_i_array
LBRACK  [
IDENTIFIER  i
RBRACK  ]
SEMICOLON  ;
RBRACE  }
WHILE  while
LPAREN  (
IDENTIFIER  i
LES  <
NUMBER  9
RPAREN  )
RETURN  return
LPAREN  (
IDENTIFIER  j
RPAREN  )
SEMICOLON  ;
RBRACE  }
INT  int
IDENTIFIER  cal
LPAREN  (
INT  int
IDENTIFIER  num
RPAREN  )
LBRACE  {
IF  if
LPAREN  (
IDENTIFIER  num
EQU  ==
NUMBER  1
RPAREN  )
RETURN  return
LPAREN  (
NUMBER  1
RPAREN  )
SEMICOLON  ;
ELSE  else
RETURN  return
LPAREN  (
IDENTIFIER  cal
LPAREN  (
IDENTIFIER  num
MINUS  -
NUMBER  1
RPAREN  )
PLUS  +
IDENTIFIER  cal
LPAREN  (
IDENTIFIER  num
MINUS  -
NUMBER  1
RPAREN  )
TIMES  *
IDENTIFIER  cal
LPAREN  (
IDENTIFIER  num
MINUS  -
NUMBER  1
RPAREN  )
RPAREN  )
SEMICOLON  ;
RBRACE  }
VOID  void
MAIN  main
LPAREN  (
RPAREN  )
LBRACE  {
INT  int
IDENTIFIER  i
SEMICOLON  ;
INT  int
IDENTIFIER  calnum
SEMICOLON  ;
INT  int
IDENTIFIER  result
SEMICOLON  ;
IDENTIFIER  testvoid
SEMICOLON  ;
IDENTIFIER  switchtest
LPAREN  (
MINUS  -
IDENTIFIER  c_i_1
MINUS  -
IDENTIFIER  c_i_2
RPAREN  )
SEMICOLON  ;
IDENTIFIER  testifelse
LPAREN  (
NUMBER  1
RPAREN  )
SEMICOLON  ;
IDENTIFIER  testifelse
LPAREN  (
NUMBER  11
RPAREN  )
SEMICOLON  ;
IDENTIFIER  dowhiletest
SEMICOLON  ;
IDENTIFIER  i
BECOMES  =
NUMBER  0
SEMICOLON  ;
DO  do
LBRACE  {
PRINTF  printf
LPAREN  (
IDENTIFIER  var_i_array
LBRACK  [
IDENTIFIER  i
RBRACK  ]
RPAREN  )
SEMICOLON  ;
PRINTF  printf
LPAREN  (
IDENTIFIER  var_c_array
LBRACK  [
IDENTIFIER  i
RBRACK  ]
RPAREN  )
SEMICOLON  ;
IDENTIFIER  i
BECOMES  =
IDENTIFIER  i
PLUS  +
NUMBER  1
SEMICOLON  ;
RBRACE  }
WHILE  while
LPAREN  (
IDENTIFIER  i
LES  <
NUMBER  9
RPAREN  )
PRINTF  printf
LPAREN  (
string  Waiting for input:
RPAREN  )
SEMICOLON  ;
SCANF  scanf
LPAREN  (
IDENTIFIER  calnum
RPAREN  )
SEMICOLON  ;
IDENTIFIER  result
BECOMES  =
IDENTIFIER  cal
LPAREN  (
IDENTIFIER  calnum
RPAREN  )
SEMICOLON  ;
PRINTF  printf
LPAREN  (
string  input:
COMMA  ,
IDENTIFIER  calnum
RPAREN  )
SEMICOLON  ;
PRINTF  printf
LPAREN  (
string  result:
COMMA  ,
IDENTIFIER  result
RPAREN  )
SEMICOLON  ;
RBRACE  }
